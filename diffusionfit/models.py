"""
"""

from typing import Union
import numpy as np
import numba

@numba.njit(cache=True)
def gaussian(distances: np.ndarray, peak_intensity: float,
             gamma: float) -> np.ndarray:
    """Models a Gaussian fluorescence intensity distribution.

    This is a model for fitting the 2D fluorescence intensity distribution for
    a diffusing fluorescent molecule. It is based on a model for isotropic
    diffusion from an instantaneous point source, fitting the Gaussian shape of
    the diffusion cloud at any given time for that model.

    Args:
        distances: The distances from the center of the diffusion cloud (i.e.,
            the distance from the point source).
        peak_intensity: The peak intensity of the Gaussian distribution at distance
            zero.
        gamma: The width of the Gaussian distribution. Note that gamma^2 is
            proportional to mean squared displacement of the diffusing substance.

    Returns
        A numpy.ndarray with the corresponding intensity at each distance from
        the diffusion point source.

    References:
        1.  Nicholson, C. and Tao, L., 1993. Hindered diffusion of high
            molecular weight compounds in brain extracellular microenvironment
            measured with integrative optical imaging. Biophysical journal, 65(6),
            pp.2277-2290. https://dx.doi.org/10.1016/0006-3495(93)81324-9
    """
    return peak_intensity * np.exp(-(distances/gamma)**2)

@numba.njit(cache=True)
def anisotropic_gaussian(x_distance: np.ndarray, y_distance: np.ndarray,
                         peak_intensity: float, gamma_x:
                         float, gamma_y: float) -> np.ndarray:
    """Models a 2D anistropric Gaussian intensity distribution.

    This is a model for fitting the 2D fluorescence intensity distribution for
    an anisotropically diffusing fluorescent molecule. It is based on a model
    for diffusion from an instantaneous point source but allows for anisotropic
    diffusion along the two dimensions.

    Args:
        x_distances: The distances from the center of the diffusion cloud (i.e.,
            the distance from the point source) along the x-dimension.
        y_distances: The distances from the center of the diffusion cloud (i.e.,
            the distance from the point source) along the y-dimension.
        peak_intensity: The peak intensity of the anisotropic Gaussian distribution
            at distance zero.
        gamma_x: The width of the Gaussian distribution along the x-dimension.
            Note that gamma_x^2 is proportional to the mean squared displacement of the
            diffusing substance along the x-dimension.
        gamma_y: The width of the Gaussian distribution along the y-dimension.
            Note that gamma_y^2 is proportional to the mean squared displacement of the
            diffusing substance along the y-dimension.

    Returns
        A numpy.ndarray of the corresponding intensity values at each positions
        relative to the diffusion point source.
    """
    return peak_intensity * np.exp(-(x_distance/gamma_x)**2) * np.exp(-(y_distance/gamma_y)**2)

@numba.njit(cache=True)
def point_clark(distances: np.ndarray, imax: float, beta: float,
                gamma:float) -> np.ndarray:
    """Models a 2D fluorescence intensity distribution of a peptide sensor.

    This is a model for fitting the 2D fluorescence intensity distribution for
    signal generated by fluorescent GPCR-based peptide sensors such as dLight and kLight.
    It combines a model for isotropic diffusion from an instantaneous point
    source with the Clark equation for receptor-response. The target peptide is
    assumed to diffuse isotropically from an instantaneous point source. It
    can then bind to the sensor which generates fluorescent signal according
    to the Clark equation. The Clark equation corresponds to single-state
    receptor activation model with a linear effect response:
        peptide + sensor <--K_d--> peptide:sensor ---> fluorescent signal,
    such that fluorescent signal is directly proportional to the sensor
    occupation peptide:sensor. The sensor is assumed to have an uniform
    concentration in the medium.

    Args:
        distances: The distances from the center of the diffusion cloud (i.e.,
            the distance from the point source).
        imax: The maximum flurorescence intensity corresponding to all
            sensors being occupied.
        beta: Related to the intensity of the point source diffusion cloud.
        gamma: The width of the point source diffusion cloud with Guassian shape.
            Note that gamma^2 is proportional to the mean squared displacement of the diffusing.

    Returns
        A numpy.ndarray of the corresponding intensity values at each positions
        relative to the diffusion point source.
    """
    return Emax / (1 + beta*np.exp((r/gamma)**2))

@numba.njit(cache=True)
def point_source(time: Union[float, np.ndarray],
                 distance: Union[float, np.ndarray],
                 source_molecules: int,
                 volume_fraction: float,
                 diffusion_coefficient: float,
                 tortuosity: float,
                 dimensions: int=3) -> Union[float, np.ndarray]:
    """Models isotropic diffusion from an instantaneous point source.

    This model describes the concentration distribution of a molecule over time
    and space when diffusing isotropically from an instantaneous point source
    in the brain extracellular space.

    Args:
        time: The time(s) at which to compute the concentration.
        distance: The distance(s) from the center of the diffusion cloud (i.e.,
            the distance from the point source).
        source_molecules: The number of molecules released from the point
            source at time zero.
        volume_fraction: The volume fraction of the brain extracellular space.
            Should be 0 < volume_fraction <= 1.
        diffusion_coefficient: The diffusion coefficient of the molecule in
            free medium.
        tortuosity: The tortuosity of the brain extracellular space as compared
            to free medium. Note that tortuosity = sqrt(D/D*) where D* is
            the effective diffusion coeffient in the brain extracellular space
            and D is the diffusion coefficient in free medium.
        dimensions (optional): The number of dimensions over which the
            molecules are diffusing. Options: 1, 2, 3. Default: 3.

    Returns:
        The concentration(s) for the given time(s) and distance(s).
    """
    effective_diffusion_coefficient = diffusion_coefficient / tortuosity**2
    a = (source_molecules/volume_fraction)
    b = np.exp(-distance**2/(4*effective_diffusion_coefficient*time))
    c = (4*np.pi*effective_diffusion_coefficient*time)**(dimensions/2)
    return a * b / c

@numba.njit(cache=True)
def point_source_withloss(time: Union[float, np.ndarray],
                          distance: Union[float, np.ndarray],
                          source_molecules: int,
                          volume_fraction: float,
                          diffusion_coefficient: float,
                          tortuosity: float,
                          loss_rate: float,
                          dimensions: int=3) -> Union[float, np.ndarray]:
    """Models isotropic diffusion from an instantaneous point source.

    This model describes the concentration distribution of a molecule over time
    and space when diffusing isotropically from an instantaneous point source
    in the brain extracellular space with an additional first order loss of
    the molecule during the process. The loss rate accounts for many irreversible
    processes that may deplete the diffusing molecule, such as cellular uptake,
    degradation, or clearance from the extracellular space.

    Args:
        time: The time(s) at which to compute the concentration.
        distance: The distance(s) from the center of the diffusion cloud (i.e.,
            the distance from the point source).
        source_molecules: The number of molecules released from the point
            source at time zero.
        volume_fraction: The volume fraction of the brain extracellular space.
            Should be 0 < volume_fraction <= 1.
        diffusion_coefficient: The diffusion coefficient of the molecule in
            free medium.
        tortuosity: The tortuosity of the brain extracellular space as compared
            to free medium. Note that tortuosity = sqrt(D/D*) where D* is
            the effective diffusion coeffient in the brain extracellular space
            and D is the diffusion coefficient in free medium.
        loss_rate: The kinetic rate for the 1st order loss term, typically in
            units of per second. Should be loss_rate >= 0.
        dimensions (optional): The number of dimensions over which the
            molecules are diffusing. Options: 1, 2, 3. Default: 3.

    Returns:
        The concentration(s) for the given time(s) and distance(s).
    """
    effective_diffusion_coefficient = diffusion_coefficient / tortuosity**2
    a = (source_molecules/volume_fraction)
    b = np.exp(-distance**2/(4*effective_diffusion_coefficient*time))
    c = (4*np.pi*effective_diffusion_coefficient*time)**(dimensions/2)
    c = np.exp(-loss_rate*t)
    return a * b / c * d

@numba.njit(cache=True)
def log_intensity_withloss(times: np.ndarray, loss_rate: float, B: float,
                           t0: float) -> np.ndarray:
    """Models the decrease of the peak intensity with time including loss.

    This is a model for fitting the peak intensity over time for a 2D Gaussian
    distribution as derived from the model for isotropic diffusion from an
    instantaneous point source accounting for a 1st order loss term. (e.g., see
    the gaussian and point_source_withloss functions representing the initial
    fitting function and underlying model, respectively).

    Args:
        times: The time points over which to compute the log-intensity. Should
            be times + t0 > 0.
        loss_rate: The kinetic rate for the 1st order loss term, typically in
            units of per second. Should be loss_rate >= 0.
        B: A fitting parameter accounting for time independent parts of the
            point source model.
        t0: A time adjustment accounting for uncertainty in the actual time
            origin of the diffusion process, such as measurement delay.
    """
    times_adjusted = times + t0
    return -loss_rate*(times_adjusted) - np.log(times_adjusted) + B

@numba.njit(cache=True)
def log_intensity_noloss(times, B, t0):
    """Models the decrease of the peak intensity with time without any loss.

    This is a model for fitting the peak intensity over time for a 2D Gaussian
    distribution as derived from the model for isotropic diffusion from an
    instantaneous point source WITHOUT a 1st order loss term. (e.g., see the
    gaussian and point_source_withloss functions representing the initial
    fitting function and underlying model, respectively).

    Args:
        times: The time points over which to compute the log-intensity. Should
            be times + t0 > 0.
        B: A fitting parameter accounting for time independent parts of the
            point source model.
        t0: A time adjustment accounting for uncertainty in the actual time
            origin of the diffusion process, such as measurement delay.
    """
    times_adjusted = times + t0
    return - np.log(times_adjusted) + B

@numba.njit(cache=True)
def normal_diffusion(times, diffusion_coefficient, dimensions=2):
    """Models the relationship between mean squared displacement and time during a normal (Brownian) diffusion process.

    During normal diffusion the mean squared displacement increases linearly
    with time according to the Einstein relation.
    """
    return 2 * dimensions * diffusion_coefficient * times

@numba.njit(cache=True)
def anomalous_diffusion(times: np.ndarray,
                        generalized_diffusion_coefficient: float,
                        alpha: float) -> np.ndarray:
    """Models the relationship between mean squared displacement and time during an anomalous diffusion process.

    During anomolous diffusion the mean squared displacement does increase linearly
    with time but instead increases with time according to a power law.
    There are two categories of anomalous diffusion: alpha < 1 corresponds to
    subdiffusion and alpha > 1 corresponds to superdiffusion. If alpha = 1
    then the normal (linear) diffusion relationship is recovered. alpha = 2 is
    also the special case of ballistic diffusion.

    References:
        1.  Gerald R. Kneller, Krzysztof Baczynski, and Marta
            Pasenkiewicz-Gierula, Consistent picture of lateral subdiffusion in
            lipid bilayers: Molecular dynamics simulation and exact results,
            The Journal of Chemical Physics 135, 141105 (2011);
            doi: http://dx.doi.org/10.1063/1.3651800
        2.  Metzler, R. and Klafter, J., 2000. The random walk's guide to
            anomalous diffusion: a fractional dynamics approach. Physics reports,
            339(1), pp.1-77. https://doi.org/10.1016/S0370-1573(00)00070-3
    """
    return generalized_diffusion_coefficient * times**alpha
